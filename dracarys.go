package main

import (
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage             = protogen.GoImportPath("context")
	dracarysPackage            = protogen.GoImportPath("github.com/merenguessss/dracarys")
	dracarysClientPackage      = protogen.GoImportPath("github.com/merenguessss/dracarys/client")
	dracarysServerPackage      = protogen.GoImportPath("github.com/merenguessss/dracarys/server")
	dracarysInterceptorPackage = protogen.GoImportPath("github.com/merenguessss/dracarys/interceptor")
)

const deprecationComment = "// Deprecated: Do not use."

func generateFile(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	g.P("// Code generated by protoc-gen-go-dracarys. DO NOT EDIT.")
	if file.Proto.Options.GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}

	g.P("//  ________________________________________________  _________")
	g.P("//  ___  __ \\__  __ \\__    |_  ____/__    |__  __ \\ \\/ /_  ___/")
	g.P("//  __  / / /_  /_/ /_  /| |  /    __  /| |_  /_/ /_  /_____ \\ ")
	g.P("//  _  /_/ /_  _, _/_  ___ / /___  _  ___ |  _, _/_  / ____/ / ")
	g.P("//  /_____/ /_/ |_| /_/  |_\\____/  /_/  |_/_/ |_| /_/  /____/")
	g.P()

	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	clientName := service.GoName + "Client"

	g.P("//" + clientName + "is API for " + service.GoName + " service.")
	g.P("// Code generated by protoc-gen-go-dracarys. DO NOT EDIT.")
	g.P("//---------------------- client --------------------------")

	// client interface
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.P(fmt.Sprintf("type %s interface{", clientName))
	g.Annotate(clientName, service.Location)
	for _, method := range service.Methods {
		g.Annotate(clientName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.Comments.Leading,
			clientSignature(g, method))
	}
	g.P("}")
	g.P()

	// Client structure.
	g.P("type ", unexport(clientName), " struct {")
	g.P("client *", dracarysPackage.Ident("Client"))
	g.P("}")
	g.P()

	// NewClient factory.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func New", clientName, " (opts ...", dracarysClientPackage.Ident("Option"), ") ", clientName, " {")
	g.P("return &", unexport(clientName), "{client:dracarys.NewClient(opts...)}")
	g.P("}")
	g.P()

	// Client method implementations.
	for _, method := range service.Methods {
		// Unary RPC method
		genClientMethod(g, method)
	}

	// Server interface.
	serverType := service.GoName + "Server"
	g.P("//" + serverType + "is API for " + service.GoName + " service.")
	g.P("// Code generated by protoc-gen-go-dracarys. DO NOT EDIT.")
	g.P("//---------------------- server --------------------------")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(serverType, service.Location)
	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		g.Annotate(serverType+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.Comments.Leading,
			serverSignature(g, method))
	}
	g.P("}")
	g.P()

	// server registration.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	serviceDescVar := service.GoName + "_ServiceDesc"
	g.P("func Register", service.GoName, "Server(s *", dracarysServerPackage.Ident("Server"),
		", srv ", serverType, ", opts ...", dracarysServerPackage.Ident("Option"), ") {")
	g.P("s.Register(&", serviceDescVar, `, srv, opts...)`)
	g.P("}")
	g.P()

	// Server handler implementations.
	var handlerNames []string
	for _, method := range service.Methods {
		hname := genServerMethod(g, method)
		handlerNames = append(handlerNames, hname)
	}

	// Service descriptor.
	g.P("var ", serviceDescVar, " = ", dracarysServerPackage.Ident("ServiceDesc"), " {")
	g.P("ServiceName: ", strconv.Quote("dracarys.service."+string(service.Desc.FullName())), ",")
	g.P("HandlerType: (*", serverType, ")(nil),")
	g.P("Methods: []*", dracarysServerPackage.Ident("Method"), "{")
	for i, method := range service.Methods {
		g.P("{")
		g.P("Name: ", strconv.Quote(string(method.Desc.Name())), ",")
		g.P("Func: ", handlerNames[i], ",")
		g.P("},")
	}
	g.P("},")
	g.P("}")
	g.P()
}

func genServerMethod(g *protogen.GeneratedFile, method *protogen.Method) string {
	service := method.Parent
	hname := fmt.Sprintf("_%s_%s_Handler", service.GoName, method.GoName)
	serviceName := service.GoName + "Server"
	methodName := method.GoName
	in := method.Input.GoIdent

	g.P("func ", hname, "(ctx ", contextPackage.Ident("Context"),
		", srv interface{}, parse func(interface{}) error, beforeHandle []",
		dracarysInterceptorPackage.Ident("ServerHandler"), ") (interface{}, error) {")
	g.P("in := new(", method.Input.GoIdent, ")")
	g.P("if err := parse(in); err != nil {")
	g.P("return nil, err")
	g.P("}")
	g.P()
	g.P("if len(beforeHandle) == 0 {")
	g.P(fmt.Sprintf("return srv.(%s).%s(ctx, in)", serviceName, methodName))
	g.P("}")
	g.P()
	g.P("handler := func(ctx ", contextPackage.Ident("Context"), ", reqBody interface{}) (interface{}, error) {")
	g.P("return srv.(", serviceName, ").", methodName, "(ctx, reqBody.(*", in, "))")
	g.P("}")
	g.P()
	g.P("return interceptor.ServerHandle(ctx, beforeHandle, handler, in)")
	g.P("}")
	g.P()
	return hname
}

func genClientMethod(g *protogen.GeneratedFile, method *protogen.Method) {
	service := method.Parent

	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P(deprecationComment)
	}

	g.P("func (c *", unexport(service.GoName), "Client) ", clientSignature(g, method), "{")
	g.P("out := new(", method.Output.GoIdent, ")")
	g.P(`c.client.Service("dracarys.service.`, service.Desc.FullName(), `")`)
	g.P(`err := c.client.Invoke(ctx,"`, method.Desc.Name(), `", in, out, opts...)`)
	g.P("if err != nil { return nil, err }")
	g.P("return out, nil")
	g.P("}")
	g.P()
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent)
	s += ", opts ..." + g.QualifiedGoIdent(dracarysClientPackage.Ident("Option")) + ") ("
	s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	s += ", error)"
	return s
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(" + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	s += ", *" + g.QualifiedGoIdent(method.Input.GoIdent)
	s += ") (*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	return s
}
